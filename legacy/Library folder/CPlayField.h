/****************************************************************************** CPlayField.h   ******************************************************************************/#pragma once#include <QDOffscreen.h>class	CObjectList;class	CSchneeObjectList;class	CSpriteGroup;class	CSchneeSprite;class	CSprite;class CPlayField {public:				CPlayField(CWindowPtr  hostWindow, const Rect* hostBounds);		virtual ~CPlayField();		virtual void	MoveSprites();	virtual	void	CheckForCollisions();	virtual	void	ShowNextFrame();						void	AddGroup(CSpriteGroup * newGroup);			void	RemoveGroup(CSpriteGroup * doa_Group);			void	PreDrawOnBackground();			void	PostDrawOnBackground();			void	PreDrawOnWorkplace();			void	PostDrawOnWorkplace();						void	ErasePlayfieldEnds();	virtual	void	HandlePlayFieldUpdate(Rect * updateBounds);		CGrafPtr	GetHostGrafPort() { return fHostPort;}			void	GetBounds(Rect * playFieldBnds) { *playFieldBnds = fPlayfieldBnds; }					protected:	GWorldPtr		fBkgndBuffer;	GWorldPtr		fWorkplaceBuffer;	CGrafPtr		fHostPort;	Rect			fHostBnds;	Rect			fPlayfieldBnds;	CObjectList *	fSpriteGroups;	CObjectList *	fAllSprites;	CObjectList *	fLiveSprites;			OSErr	CreateGWorld(GWorldPtr * resultGWorld, Rect * bounds);						void	SortSprite(CSchneeSprite * theSprite, long index);						void	EraseSprites();			void	BlitSpritesToWorkspace();			void	BlitSpritesOnscreen();						void	UpdateAllSprites();	// Core routines that blit. Default version use CopyBits	virtual	void	EraseChunk(Rect * blitRect);	virtual	void	CopyChunkOnscreen(Rect * copyBnds);			void	CorrectForOverlappingStillSprites(CSprite * stillSprite);private:	GDHandle	fOldGDevice;	CGrafPtr 	fOldCPort;};