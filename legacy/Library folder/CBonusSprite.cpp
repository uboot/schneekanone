/****************************************************************************** CBonusSprite.cp   ******************************************************************************/#pragma once#include "CBonusSprite.h"#include "ErrorHandler.h"#include "CGame.h"extern CGame	gCurrentGame;CSpriteGroup *	CBonusSprite::cBonusSpriteList = nil;CBonusSprite::CBonusSprite(short templateID, CSpriteGroup * bonusGroup)			:CEnemy(templateID, bonusGroup){	InitBonusSprite();}CBonusSprite::CBonusSprite(CBonusSprite & source)	:CEnemy(source){	fLives  = source.fLives;	fScore  = source.fScore;	fXLScore  = source.fXLScore;}	CBonusSprite::~CBonusSprite(){	// code}	void	CBonusSprite::InitBonusSprite(){	fLives  = 0;	fScore  = 0;	fXLScore  = 0;}	void	CBonusSprite::Hit(){	if (IsVisible())	{		Hide();			gCurrentGame.AddScore(fScore);		gCurrentGame.AddXLScore(fXLScore);		gCurrentGame.AddLives(fLives);	}}	void 	CBonusSprite::AddBonusSpriteToLevel(BonusObjectRec * object,							CSpriteGroup * group){	CBonusSprite *	bonusSprite = nil;	long			i, j;			for(j = 0; j < object->spriteCount; j++)	{		if(cBonusSpriteList != 0)		{			for(i = 1; i <= cBonusSpriteList->GetObjectCount(); i++)			{				CBonusSprite *	currBonusSprite;								currBonusSprite = (CBonusSprite *) cBonusSpriteList->GetNthObject(i);								if(currBonusSprite->fResID == object->spriteID)				{					bonusSprite = (CBonusSprite *)currBonusSprite->Clone();					ASSERT(CBonusSprite);				}			}		}			else				{			cBonusSpriteList = new CSpriteGroup ();				if(cBonusSpriteList == nil)			{				PostFatalError(memFullErr);				return;			}		}				if (bonusSprite == nil)		{			bonusSprite = new CBonusSprite (object->spriteID, group);										if(bonusSprite == nil)			{				PostFatalError(memFullErr);				return;			}		}			bonusSprite->SetStartingPosition(object->objectPosX + j * object->deltaX,								   object->objectPosY + j * object->deltaY);		bonusSprite->SetAutoMove(0, 0);		bonusSprite->SetAutoMoveTime(-1, 1);		bonusSprite->SetBasePosition(kNoBase, kNoBase);						bonusSprite->fLives = object->lives;		bonusSprite->fScore = object->score;		bonusSprite->fXLScore = object->xLScore;		cBonusSpriteList->Add(bonusSprite);		group->Add(bonusSprite);	}	}	void	CBonusSprite::ClearOutAllBonusSprites(){	if(cBonusSpriteList)	{		CBonusSprite *	bonusSprite;			while((bonusSprite =					(CBonusSprite *)cBonusSpriteList->GetNthObject(1)) != nil)		{			RemoveBonusSprite(bonusSprite);		}						delete(cBonusSpriteList);		cBonusSpriteList = nil;	}}void *	CBonusSprite::Clone(){	CBonusSprite * clonedBonusSprite;		clonedBonusSprite = new CBonusSprite (*this);	ASSERT(clonedBonusSprite);	clonedBonusSprite->InitBonusSprite();		return clonedBonusSprite;}void	CBonusSprite::RemoveBonusSprite(CBonusSprite * bonusSprite){	ASSERT(cBonusSpriteList);		bonusSprite->Hide();		bonusSprite->fEnemyGroup->Remove(bonusSprite);	cBonusSpriteList->Remove(bonusSprite);	delete(bonusSprite);}