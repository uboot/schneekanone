/****************************************************************************** CSpriteCel.h   ******************************************************************************/#pragma once#include <QDOffscreen.h>class CSpriteCel {public:			CSpriteCel();			CSpriteCel(short cicnID);				virtual	~CSpriteCel();		virtual	void	BlitToBuffer(GWorldPtr buffer, const Rect * target);		virtual Boolean	Intersect(CSpriteCel * testCel, 								const Rect * testSpriteBnds, 								const Rect * mySpriteBnds);										void		GetCelBnds(Rect * celBnds) { *celBnds = fCelBnds; }							short		GetHorzCenterOffset() { return fHorzCenterOffset; }	short		GetVertCenterOffset() { return fVertCenterOffset; }		Boolean	CanCollide() { return fCanCollide; }		short		GetCollisionRectOffsetX()								{ return fHorzCollisionMaskOffset; }	short		GetCollisionRectOffsetY()								{ return fVertCollisionMaskOffset; }									PixMapHandle	GetCollisionMask() { return fCollisionMaskPixels; }	void			GetCollisionRect(Rect * theRect)									{ *theRect = fCollisionRect; }												protected:		RgnHandle		fMaskRgn;	GWorldPtr		fCelImage;	PixMapHandle	fCelPixels;	Rect			fCelBnds;	short			fHorzMaskOffset;	short			fVertMaskOffset;		GWorldPtr		fCollisionMask;	PixMapHandle	fCollisionMaskPixels;	Rect			fCollisionRect;		short			fHorzCollisionMaskOffset;	short			fVertCollisionMaskOffset;		short			fHorzCenterOffset;	short			fVertCenterOffset;		Boolean		fCanCollide;		OSErr		MakeRgnMask(CIconHandle iconH);	OSErr		MakeCelGWorld(CIconHandle iconH);	OSErr		MakeCollisionPixMask(CIconHandle iconH);	OSErr		InitCollisionMaskData(CIconHandle iconH);private:	void		CSpriteCelX();};