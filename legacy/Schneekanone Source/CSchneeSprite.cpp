/****************************************************************************** CSchneeSprite.cp   ******************************************************************************/#include "CSchneeSprite.h"CSchneeSprite::CSchneeSprite(short templateID) : CSprite(templateID){	SetAutoMove(0, 0);		fCurrHorzCenterOffset = (GetCurrentCel())->GetHorzCenterOffset();	fCurrVertCenterOffset = (GetCurrentCel())->GetVertCenterOffset();	fCurrDistance = -1 * (GetXCenter() + GetYCenter());	fCameCloser = false;		fStepDistance = kStandardStepDistance;}CSchneeSprite::~CSchneeSprite(){	// code}void	CSchneeSprite::Move(){	CStep	step;	short	prevDistance;		step = fMove.Move();		CSprite::SetAutoMove(step.GetHorz() * fStepDistance,						 step.GetVert() * fStepDistance);		CSprite::Move();	prevDistance = fCurrDistance;	fCurrDistance = -1 * (GetXCenter() + GetYCenter());	fCameCloser = prevDistance > fCurrDistance;}void	CSchneeSprite::Hit(){	// code}void	CSchneeSprite::SetCurrentCel(short index){	CSprite::SetCurrentCel(index);		fCurrHorzCenterOffset = (GetCurrentCel())->GetHorzCenterOffset();	fCurrVertCenterOffset = (GetCurrentCel())->GetVertCenterOffset();}short	CSchneeSprite::GetCurrentDistance()	// mf79 Glue-Code!!!{	if(fDogTag == kGrasTag || fDogTag == kEisTag || fDogTag == kGroundTag)		return 10000;	else		return fCurrDistance;}void	CSchneeSprite::SetStartingPosition(short h, short v){	CSprite::SetStartingPosition(h, v);		fCurrDistance = -1 * (GetXCenter() + GetYCenter());	fCameCloser = false;}	void	CSchneeSprite::SetAutoMove(short dh, short dv){	fMove.SetMove(dh, dv);}short	CSchneeSprite::GetXCenter(){	return CalculateXPos(fCurrBnds.left + fCurrHorzCenterOffset,							fCurrBnds.top + fCurrVertCenterOffset);}short	CSchneeSprite::GetYCenter(){	return CalculateYPos(fCurrBnds.left + fCurrHorzCenterOffset,							fCurrBnds.top + fCurrVertCenterOffset);}		short	CalculateXPos(short horizontal,short vertical){	short	mod;		mod = ( 2 * horizontal ) % 3;	// mf79 zusammenfassen		return vertical - ( 2 * horizontal ) / 3 - ( mod > 1 ? 1 : 0 );}short	CalculateYPos(short horizontal,short vertical){	return horizontal + vertical - 1;}