/****************************************************************************** CMove.cp   ******************************************************************************/#include "CMove.h"#include "Assert.h"#define kLength		3CMove::CMove(short horz, short vert){	fSteps = fSteps = new CStep[kLength];		SetMove(horz, vert);}CMove::~CMove(){	if (fSteps) delete [] fSteps;		fSteps = nil;}	void	CMove::SetMove(short horz, short vert){	char	vorzeichenHorz;	char	vorzeichenVert;		short	i = 0;		fLength = 0;	fIndex = 0;		if (horz >= 0)		vorzeichenHorz = 1;	else	{		vorzeichenHorz = -1;		horz *= -1;	}		if (vert >= 0)		vorzeichenVert = 1;	else	{		vorzeichenVert = -1;		vert *= -1;	}		fLength = horz > vert ? horz : vert;		if (fLength > kLength)	{		delete [] fSteps;		fSteps = new CStep[fLength];	}			ASSERT(fSteps);		while (horz > vert)		{				fSteps[i].SetStep(vorzeichenHorz, 0);			i++;			horz--;		}		while (vert > horz)		{				fSteps[i].SetStep(0, vorzeichenVert);			i++;			vert--;		}		for ( ;i < fLength; fSteps[i].SetStep(vorzeichenHorz, vorzeichenVert), i++);}CStep		CMove::Move(){	CStep	retStep = {0, 0};		if (fLength != 0)	{		retStep = fSteps[fIndex];			fIndex++;			if (fIndex == fLength) fIndex = 0;	}	else		retStep.SetStep(0, 0);		return retStep;}