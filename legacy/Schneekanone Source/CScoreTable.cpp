/****************************************************************************** CScoreTable.cp   ******************************************************************************/#pragma once#include <QDOffscreen.h>#include "CScoreTable.h"#include "CPlayfield.h"#include "PrivateUtilities.h"#define kNumPlayerToStart	3#define kRightBorder		108#define kTopBorder			343#define kWidth				60#define kHeight				107extern CPlayField *	gPiste;CScoreTable::CScoreTable() : CSprite(){	SetRect(&fCurrBnds, kRightBorder - kWidth, kTopBorder,			kRightBorder, kTopBorder + kHeight);		// Rechteck-Koordinaten		fPrevBnds = fEraseBnds = fCurrBnds;}			// DestructorsCScoreTable::~CScoreTable(){	// code}void	CScoreTable::Reset(){	fCurrGameState.fPlayerLives = kNumPlayerToStart;	fCurrGameState.fScore = 0;	fCurrGameState.fLevel = 0;	fCurrGameState.fXLScore = 0;		fPrevGameState.fPlayerLives = kNumPlayerToStart;	fPrevGameState.fScore = 0;	fPrevGameState.fLevel = 0;	fPrevGameState.fXLScore = 0;		fLevelName[0] = 0x00;}void	CScoreTable::NextLevel(){	fPrevGameState = fCurrGameState;	//fPrevGameState.fLevel--;}		void	CScoreTable::TableChanged(){	fEraseMe = true;	fDrawMe = true;}	void	CScoreTable::BlitFrame(GWorldPtr destBuffer){	Str255		string;		gPiste->PreDrawOnWorkplace();		TextFace(bold);	TextSize(18);	TextFont(helvetica);		if (fCurrGameState.fPlayerLives >= 0)	{		NumToString(fCurrGameState.fPlayerLives, string);		MovePenTo(kRightBorder - StringWidth(string), kTopBorder + 20);		DrawString(string);				NumToString(fCurrGameState.fScore, string);		MovePenTo(kRightBorder - StringWidth(string), kTopBorder + 62);		DrawString(string);				NumToString(fCurrGameState.fXLScore, string);		MovePenTo(kRightBorder - StringWidth(string), kTopBorder + 100);		DrawString(string);	}		gPiste->PostDrawOnWorkplace();		}